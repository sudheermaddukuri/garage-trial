{note}
Logout is not possible when using [JWT:guide:jwt] tokens (the default strategy), as no state is kept in the server. If
you still want to have logout, you can provide your own implementation by creating a subclass of
[JwtTokenStorageService|http://alvarosanchez.github.io/grails-spring-security-rest/docs/gapi/com/odobo/grails/plugin/springsecurity/rest/token/storage/jwt/JwtTokenStorageService.html]
and overriding the methods @storeToken@ and @removeToken@.

Then, register your implementation in @resources.groovy@ as @tokenStorageService@.
{note}

The [logout filter|http://alvarosanchez.github.io/grails-spring-security-rest/docs/gapi/com/odobo/grails/plugin/springsecurity/rest/RestLogoutFilter.html]
exposes an endpoint for deleting tokens. It will read the token from an HTTP header. If found, will delete it from the
storage, sending a 200 response. Otherwise, it will send a 404 response.

You can configure it in @Config.groovy@ using this properties:

{table}
*Config key*                                                    | *Default value*
@grails.plugin.springsecurity.rest.logout.endpointUrl@          | @/api/logout@
@grails.plugin.springsecurity.rest.token.validation.headerName@ | @X-Auth-Token@
{table}
